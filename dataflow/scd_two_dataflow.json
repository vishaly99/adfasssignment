{
	"name": "scd_two_dataflow",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "scd_two_source",
						"type": "DatasetReference"
					},
					"name": "subscribefile"
				},
				{
					"dataset": {
						"referenceName": "SCD_AzureSqlTable",
						"type": "DatasetReference"
					},
					"name": "subscribesink"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "SCD_AzureSqlTable",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"dataset": {
						"referenceName": "SCD_AzureSqlTable",
						"type": "DatasetReference"
					},
					"name": "sink2"
				}
			],
			"transformations": [
				{
					"name": "AddingIsActive"
				},
				{
					"name": "select1"
				},
				{
					"name": "lookup1"
				},
				{
					"name": "ExisitngRows"
				},
				{
					"name": "select2"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "alterRow1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          user_id as integer,",
				"          {subscription } as string,",
				"          price as short,",
				"          {location } as string,",
				"          pincode as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> subscribefile",
				"source(output(",
				"          surrKey as integer,",
				"          user_id as integer,",
				"          subscription as string,",
				"          price as integer,",
				"          location as string,",
				"          pincode as integer,",
				"          isActive as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> subscribesink",
				"subscribefile derive(isActive = 1) ~> AddingIsActive",
				"subscribesink select(mapColumn(",
				"          SQL_surrKey = surrKey,",
				"          SQL_user_id = user_id,",
				"          SQL_subscription = subscription,",
				"          SQL_price = price,",
				"          SQL_location = location,",
				"          SQL_pincode = pincode,",
				"          SQL_isActive = isActive",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"subscribefile, select1 lookup(user_id == SQL_user_id,",
				"     multiple: true,",
				"     broadcast: 'auto')~> lookup1",
				"lookup1 filter(!isNull(SQL_user_id)) ~> ExisitngRows",
				"ExisitngRows select(mapColumn(",
				"          SQL_surrKey,",
				"          SQL_user_id,",
				"          SQL_subscription,",
				"          SQL_price,",
				"          SQL_location,",
				"          SQL_pincode,",
				"          SQL_isActive",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"select2 derive(SQL_isActive = 0) ~> derivedColumn1",
				"derivedColumn1 alterRow(updateIf(1==1)) ~> alterRow1",
				"AddingIsActive sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          surrKey as integer,",
				"          user_id as integer,",
				"          subscription as string,",
				"          price as integer,",
				"          location as string,",
				"          pincode as integer,",
				"          isActive as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 2,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          user_id,",
				"          subscription = {subscription },",
				"          price,",
				"          location = {location },",
				"          pincode,",
				"          isActive",
				"     )) ~> sink1",
				"alterRow1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          surrKey as integer,",
				"          user_id as integer,",
				"          subscription as string,",
				"          price as integer,",
				"          location as string,",
				"          pincode as integer,",
				"          isActive as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:false,",
				"     updateable:false,",
				"     upsertable:true,",
				"     keys:['surrKey'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 1,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          surrKey = SQL_surrKey,",
				"          user_id = SQL_user_id,",
				"          subscription = SQL_subscription,",
				"          price = SQL_price,",
				"          location = SQL_location,",
				"          pincode = SQL_pincode,",
				"          isActive = SQL_isActive",
				"     )) ~> sink2"
			]
		}
	}
}